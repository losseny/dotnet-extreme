// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241005180214_ResetInitialMigration")]
    partial class ResetInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("reservation")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "Domain.Entities.Reservation.Period#ReservationPeriod", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time without time zone")
                                .HasColumnName("end");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time without time zone")
                                .HasColumnName("start");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ReservationDate", "Domain.Entities.Reservation.ReservationDate#ReservationDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date")
                                .HasColumnName("date");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("reservation", (string)null);

                    b.HasDiscriminator<string>("reservation").HasValue("Reservation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BuildingPrefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("building_prefix");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer")
                        .HasColumnName("floor_number");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer")
                        .HasColumnName("room_number");

                    b.HasKey("Id");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FreeReservation", b =>
                {
                    b.HasBaseType("Domain.Entities.Reservation");

                    b.Property<Guid>("BookerId")
                        .HasColumnType("uuid")
                        .HasColumnName("booker_id");

                    b.HasDiscriminator().HasValue("FreeReservation");
                });

            modelBuilder.Entity("Domain.Entities.StudyReservation", b =>
                {
                    b.HasBaseType("Domain.Entities.Reservation");

                    b.Property<Guid>("StudyGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("study_group_id");

                    b.HasDiscriminator().HasValue("StudyReservation");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
